# -*- coding: utf-8 -*-
"""FINAL PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bMDq2WSLnIYa4O1Eq-xw65RoksCOSIh6

# FINAL PROJECT

## A. UNDERSTAND DATA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
df = pd.read_csv('Data_Negara_HELP.csv')
df

df.info()

df.describe()

"""## B. EDA

### B.1 UNIVARIATE
"""

import warnings
warnings.filterwarnings('ignore')

plt.figure(figsize=(14,10))

for i in enumerate(df.describe().columns):
  plt.subplot(3,3, i[0]+1)
  sns.distplot(df[i[1]])
plt.plot()
plt.savefig('Fp_univariate.png')

df.sort_values(by='Pendapatan', ascending=False)

plt.figure(figsize=(10,8))
sns.scatterplot(
    x='Pendapatan',
    y='GDPperkapita',
    s=100,
    data=df
)
plt.plot()
plt.savefig('Fp_bivariate.png')

plt.figure(figsize=(10,8))
sns.heatmap(df.corr(), annot=True, fmt='.2g')

plt.plot()
plt.savefig('Fp_multivariate.png')

"""## B. OUTLIER TREATMENT"""

sns.boxplot('Pendapatan', data=df)
plt.plot()
plt.savefig('Fp_outlier pendapatan.png')

sns.boxplot('GDPperkapita', data=df)
plt.plot()
plt.savefig('Fp_outlier GDP.png')

sns.boxplot('Kematian_anak', data=df)
plt.plot()
plt.savefig('Fp_outlier kematian anak.png')

sns.boxplot('Jumlah_fertiliti', data=df)
plt.plot()
plt.savefig('Fp_outlier fertiliti.png')

def get_outlier(df):
  q1=df.quantile(0.25)
  q3=df.quantile(0.75)
  iqr=q3-q1
  df_final = df[(df>(q1-(iqr*1.5))) | (df<(q3+(iqr*1.5)))]
  return df_final

print(get_outlier(df['Pendapatan']))
print(get_outlier(df['GDPperkapita']))
print(get_outlier(df['Kematian_anak']))
print(get_outlier(df['Jumlah_fertiliti']))

def remove_outlier(df):
  q1=df.quantile(0.25)
  q3=df.quantile(0.75)
  iqr=q3-q1
  df_final = df[~(df>(q1-(iqr*1.5))) | (df<(q3+(iqr*1.5)))]
  return df_final

df_removed = remove_outlier(df)#[['Pendapatan', 'GDPperkapita', 'Kematian_anak', 'Jumlah_fertiliti']])
df_removed.dropna(axis=0, inplace=True)
df1=df_removed[['Pendapatan', 'GDPperkapita']]
display(df1)
df2=df_removed[['Kematian_anak', 'Jumlah_fertiliti']]
display(df2)

#'Pendapatan', 'GDPperkapita', 'Kematian_anak', 'Jumlah_fertiliti'
df2['Jumlah_fertiliti'].unique()

sc = StandardScaler()
df_std1 = sc.fit_transform(df1.astype(float))

kmeans1 = KMeans(n_clusters=2, random_state=42).fit(df_std1)
labels1 = kmeans1.labels_
labels1

new_df = pd.DataFrame(data=df_std1, columns=['Pendapatan', 'GDPperkapita'])
new_df['labels1_kmeans'] = labels1
new_df

plt.figure(figsize=(10,8))

plt.scatter(
    new_df['Pendapatan'][new_df.labels1_kmeans==0],
    new_df['GDPperkapita'][new_df.labels1_kmeans==0],
    c='blue', s=100, edgecolors='green'
)
plt.scatter(
    new_df['Pendapatan'][new_df.labels1_kmeans==1],
    new_df['GDPperkapita'][new_df.labels1_kmeans==1],
    c='red', s=100, edgecolors='green'
)
plt.scatter(
    kmeans1.cluster_centers_[:,0], kmeans1.cluster_centers_[:,1],
    c='k', s=300
)
plt.xlabel('Pendapatan')
plt.ylabel('GDPperkapita')
plt.plot()
plt.savefig('Fp_pendapatanXGDP.png')

wcss=[]
for i in range(1,11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df_std1)
    wcss.append(kmeans.inertia_)
plt.plot(range(1,11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.plot()
plt.savefig('Fp_elbow_pendapatanXGDP.png')

kmeans3 = KMeans(n_clusters = 3, init='k-means++', random_state=42)
kmeans3.fit(df_std1)
labels3 = kmeans3.labels_

new_df['label1_kmeans'] = labels3
new_df

plt.figure(figsize=(10,8))

plt.scatter(
    new_df['Pendapatan'][new_df.label1_kmeans==0],
    new_df['GDPperkapita'][new_df.label1_kmeans==0],
    label='0', c='blue', s=100, edgecolors='green'
)
plt.scatter(
    new_df['Pendapatan'][new_df.label1_kmeans==1],
    new_df['GDPperkapita'][new_df.label1_kmeans==1],
    label='1', c='red', s=100, edgecolors='green'
)
plt.scatter(
    new_df['Pendapatan'][new_df.label1_kmeans==2],
    new_df['GDPperkapita'][new_df.label1_kmeans==2],
    label='2', c='green', s=100, edgecolors='green'
)
plt.scatter(
    kmeans3.cluster_centers_[:,0], kmeans3.cluster_centers_[:,1],# kmeans3.cluster_centers_[:,2],
    c='k', s=300
)
plt.xlabel('Pendapatan')
plt.ylabel('GDPperkapita')
plt.legend()
plt.plot()
plt.savefig('Fp_pendapatanXGDP_elbow.png')

from sklearn.metrics import silhouette_score

print(silhouette_score(df_std1, labels= labels1))
print(silhouette_score(df_std1, labels= labels3))

sc1 = StandardScaler()
df_std2 = sc1.fit_transform(df2.astype(float))

kmeans2 = KMeans(n_clusters=2, random_state=42).fit(df_std2)
labels2 = kmeans2.labels_
labels2

new_df2 = pd.DataFrame(data=df_std2, columns=['Kematian_anak', 'Jumlah_fertiliti'])
new_df2['labels2_kmeans'] = labels2
new_df2

plt.figure(figsize=(10,8))

plt.scatter(
    new_df2['Kematian_anak'][new_df2.labels2_kmeans==0],
    new_df2['Jumlah_fertiliti'][new_df2.labels2_kmeans==0],
    c='blue', s=100, edgecolors='green'
)
plt.scatter(
    new_df2['Kematian_anak'][new_df2.labels2_kmeans==1],
    new_df2['Jumlah_fertiliti'][new_df2.labels2_kmeans==1],
    c='red', s=100, edgecolors='green'
)
plt.scatter(
    kmeans2.cluster_centers_[:,0], kmeans2.cluster_centers_[:,1],
    c='k', s=300
)
plt.xlabel('Kematian_anak')
plt.ylabel('Jumlah_fertiliti')
plt.plot()
plt.savefig('Fp_kematianXfertiliti.png')

wcss=[]
for i in range(1,11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(df_std2)
    wcss.append(kmeans.inertia_)
plt.plot(range(1,11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.plot()
plt.savefig('Fp_elbow_kematianXfertiliti.png')

kmeans4 = KMeans(n_clusters = 3, init='k-means++', random_state=42)
kmeans4.fit(df_std2)
labels4 = kmeans4.labels_

new_df2['label2_kmeans'] = labels4
new_df2

plt.figure(figsize=(10,8))

plt.scatter(
    new_df2['Kematian_anak'][new_df2.label2_kmeans==0],
    new_df2['Jumlah_fertiliti'][new_df2.label2_kmeans==0],
    label='0', c='blue', s=100, edgecolors='green'
)
plt.scatter(
    new_df2['Kematian_anak'][new_df2.label2_kmeans==1],
    new_df2['Jumlah_fertiliti'][new_df2.label2_kmeans==1],
    label='1', c='red', s=100, edgecolors='green'
)
plt.scatter(
    new_df2['Kematian_anak'][new_df2.label2_kmeans==2],
    new_df2['Jumlah_fertiliti'][new_df2.label2_kmeans==2],
    label='2', c='green', s=100, edgecolors='green'
)
plt.scatter(
    kmeans4.cluster_centers_[:,0], kmeans4.cluster_centers_[:,1],# kmeans3.cluster_centers_[:,2],
    c='k', s=300
)
plt.xlabel('Kematian_anak')
plt.ylabel('Jumlah_fertiliti')
plt.legend()
plt.plot()
plt.savefig('Fp_kematianXfertiliti_elbow.png')

from sklearn.metrics import silhouette_score

print(silhouette_score(df_std2, labels= labels2))
print(silhouette_score(df_std2, labels= labels4))

"""## SUMMARY"""

df_removed['K_means_labels'] = kmeans3.labels_

df_removed['K_means_labels2'] = kmeans4.labels_

df_removed

label_2 = df_removed[(df_removed['K_means_labels']==2) & (df_removed['K_means_labels2']==0)]

label_2

label_2.sort_values(by=['Pendapatan'],ascending=True)[:10]